syntax = "proto3";

package Cloud_Py_API;

/*
All communications messages send by client, server only reply on them.

Client must send TaskStatus + TaskExit messages before exit.
Gracefully shutdown: server reply with TaskStateReply.bStop = True and wait for clients TaskStatus/TaskExit.
Immediately shutdown: server closes pipe/sock.
Remark: Both client and server part, must stop work after communication channel become broken.
*/

/* cloud_py_api internal messages start */

/* docs.nextcloud.com/server/latest/admin_manual/configuration_server/logging_configuration.html#log-level */
enum logLvl {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
    FATAL = 4;
}

enum taskStatus {
    ST_SUCCESS = 0;
    ST_IN_PROGRESS = 1;                   //pyfrm init done, running target app
    ST_INIT_ERROR = 2;                    //pyfrm cannot init target app
    ST_EXCEPTION = 3;                     //unexpected exception occurred
    ST_ERROR = 4;                         //target app return error status
    ST_UNKNOWN = 5;                       //default task state at start
}

message Empty { }

message TaskInitReply {
  string filePath = 1;                    //Path to file, to be executed.
  string funcName = 2;                    //Which function to execute(optional).
  repeated string args = 3;               //Optional arguments to pass to target python app's module.
  message cfgOptions {
    logLvl log_lvl = 1;                   //0-4 , level logs from NC documentation.
    string dataFolder = 2;                //Path to NC data folder.
    string frameworkAppData = 3;          //Path to target folder of app inside framework app data.
  }
  cfgOptions config = 4;
}

message TaskSetStatusRequest {            //No reply.
  taskStatus st_code = 1;                 //Status code of a task.
  string error = 2;                       //Optional error, if any. Valid only when Status is non success/in_progress.
}

message TaskExitRequest {                 //No reply. Server must close pipe/socket after this message.
  string result = 1;                      //Result of task, if any.
}

message TaskLogRequest {                  //No reply.
  logLvl log_lvl = 1;
  string module = 2;                      //What module logs belongs to.
  repeated string content = 3;            //One or more strings to put to log.
}

/* cloud_py_api internal messages end */

/* FS messages start */

enum fsResultCode {
    NO_ERROR = 0;
    NOT_PERMITTED = 1;
    LOCKED = 2;
    NOT_FOUND = 3;
    IO_ERROR = 4;
}

message fsId {
  string userId = 1;
  string fileId = 2;
}

message FsGetInfoRequest {
  fsId fileId = 1;
}

message FsGetInfoReply {
  fsId fileId = 1;
  bool is_dir = 2;
  bool is_local = 3;
  string mimetype = 4;
  string name = 5;
  string internal_path = 6;
  string abs_path = 7;
  int64 size = 8;
  int64 permissions = 9;
  int64 mtime = 10;
  string checksum = 11;
  bool encrypted = 12;
  string etag = 13;
  string ownerName = 14;
  int64 storageId = 15;
  int64 mountId = 16;
}

message FsListRequest {
  fsId dirId = 1;
}

message FsListReply {
  repeated FsGetInfoReply nodes = 1;
}

message FsReadRequest {
  fsId fileId = 1;
}

message FsReadReply {
  fsResultCode resCode = 1;
  bytes content = 2;                      //Present only if resCode is NO_ERROR.
}

message FsCreateRequest {                 //Reply for this is a FsReply message.
  fsId parentDirId = 1;
  string name = 2;
  bool is_file = 3;
  bytes content = 4;
}

message FsWriteRequest {                  //Reply for this is a FsReply message.
  fsId fileId = 1;
  bytes content = 2;
}

message FsDeleteRequest {                 //Reply for this is a FsReply message.
  fsId fileId = 1;
}

message FsMoveRequest {                   //Reply for this is a FsReply message.
  fsId fileId = 1;
  string targetPath = 2;                  //absolute path relative to MP.
  bool bCopy = 3;
}

message FsReply {
  fsResultCode resCode = 1;
}

/* FS messages end */

/* DB messages start */

message whereExpr {                       //struct for `where` part.
  string type = 1;                        //where, andWhere, orWhere
  string expression = 2;
}

message str_alias {
  string name = 1;
  string alias = 2;
}

message DbSelectRequest {
  repeated str_alias columns = 1;         //aliases or filed names.
  repeated str_alias from = 2;
  message joinType {
    string name = 1;                      //join, innerJoin, leftJoin, rightJoin.
    string fromAlias = 2;
    string join = 3;
    string alias = 4;
    string condition = 5;
  }
  repeated joinType joins = 3;
  repeated whereExpr whereas = 4;
  repeated string groupBy = 5;
  message havingExpr {
    string type = 1;                      //having, andHaving, orHaving
    string expression = 2;
  }
  repeated havingExpr havings = 6;
  repeated string orderBy = 7;
  int64 maxResults = 8;
  int64 firstResult = 9;
}

message DbSelectReply {
  int64 rowCount = 1;
  string error = 2;
  int64 handle = 3;                         //valid if only rowcount > 0.
}

message DbCursorRequest {
  enum cCmd {
    FETCH = 0;
    FETCH_ALL = 1;
    CLOSE = 2;
  }
  cCmd cmd = 1;
  int64 handle = 2;
}

message DbCursorReply {
  string error = 1;
  repeated string columnsName = 2;
  message columnData {
    bool bPresent = 1;                      //if result is NULL for that column raw, then this is True.
    bytes data = 2;                         //present if result fir column raw is not NULL.
  }
  repeated columnData columnsData = 3;
}

message DbExecRequest {
  enum rType {
      INSERT = 0;
      UPDATE = 1;
      DELETE = 2;
  }
  rType type = 1;
  string table_name = 2;
  repeated string columns = 3;
  repeated bytes values = 4;
  repeated whereExpr whereas = 5;
}

message DbExecReply {
  int64 nAffectedRows = 1;
  string error = 2;
}

/* DB messages end */

/* Next two messages are for server->client command background thread */

message ServerCommand {
  enum cmd_id {
      TASK_NOTHING = 0;
      TASK_STOP = 1;
  }
  cmd_id id = 1;
}

service CloudPyApiCore {
  rpc TaskInit (Empty) returns (TaskInitReply) {}
  rpc TaskStatus (TaskSetStatusRequest) returns (Empty) {}
  rpc TaskExit (TaskExitRequest) returns (Empty) {}
  rpc TaskLog (TaskLogRequest) returns (Empty) {}
  rpc CmdStream (Empty) returns (stream ServerCommand) {}
  rpc FsGetInfo (FsListRequest) returns (FsListReply) {}
  rpc FsList (FsListRequest) returns (FsListReply) {}
  rpc FsRead (FsReadRequest) returns (stream FsReadReply) {}
  rpc FsCreate (FsCreateRequest) returns (FsReply) {}
  rpc FsWrite (stream FsWriteRequest) returns (FsReply) {}
  rpc FsDelete (FsDeleteRequest) returns (FsReply) {}
  rpc FsMove (FsMoveRequest) returns (FsReply) {}
  rpc DbSelect (DbSelectRequest) returns (DbSelectReply) {}
  rpc DbCursor (DbCursorRequest) returns (DbCursorReply) {}
  rpc DbExec (DbExecRequest) returns (DbExecReply) {}
}
