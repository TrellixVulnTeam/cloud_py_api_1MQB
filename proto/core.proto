syntax = "proto3";

package OCA.Cloud_Py_API.Proto;

/*
  All communications messages send by client, server only replies on them.

  Client must set TaskStatus and send TaskExit messages before exit.
  Shutdown: server closes socket.
  Remark: Both client and server part, must stop work after communication channel become broken.
*/


/* docs.nextcloud.com/server/latest/admin_manual/configuration_server/logging_configuration.html#log-level */
enum logLvl {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
    FATAL = 4;
}

enum taskStatus {
    ST_SUCCESS = 0;
    ST_IN_PROGRESS = 1;                   // pyfrm init done, running target app
    ST_INIT_ERROR = 2;                    // pyfrm cannot init target app
    ST_EXCEPTION = 3;                     // Unexpected exception occurred
    ST_ERROR = 4;                         // Target app return error status
    ST_UNKNOWN = 5;                       // Default task state at start
}

message Empty { }

message dbConfig {
  string dbHost = 1;                      // DB Host configuration
  string dbType = 2;                      // DB Type configuration
  string dbName = 3;                      // DB Name configuration
  string dbUser = 4;                      // DB User configuration
  string dbPass = 5;                      // DB Password configuration
  string dbPrefix = 6;                    // DB tables prefix configuration
  string iniDbSocket = 7;                 // DB Socket configuration from ini (mysql)
  string iniDbHost = 8;                   // DB Host configuration from ini (mysql)
  string iniDbPort = 9;                   // DB Port configuration from ini (mysql)
  string dbDriverSslKey = 10;             // DB MYSQL_ATTR_SSL_KEY configuration
  string dbDriverSslCert = 11;            // DB MYSQL_ATTR_SSL_CERT configuration
  string dbDriverSslCa = 12;              // DB MYSQL_ATTR_SSL_CA configuration
  string dbDriverSslVerifyCrt = 13;       // DB MYSQL_ATTR_SSL_VERIFY_SERVER_CERT configuration
}

message TaskInitReply {
  string appName = 1;                     // Name of the app(folder in frmAppData must be present with the same name).
  string modName = 2;                     // Module name to use for `import_module` func.
  string modPath = 3;                     // Path to module root, to be executed.
  string funcName = 4;                    // Which function to execute.
  repeated string args = 5;               // Optional arguments to pass to target python app's module.
  message cfgOptions {
    logLvl log_lvl = 1;                   // 0-4 , level logs from NC documentation.
    string dataFolder = 2;                // Path to NC data folder.
    string frameworkAppData = 3;          // Path to cloud_py_api app data folder.
    string userId = 4;                    // Current NC user UID
    bool useFileDirect = 5;               // Use extra direct FS module for python, when possible.
    bool useDBDirect = 6;                 // Use extra direct DB module for python, if possible.
    int32 maxChunkSize = 7;               // Maximum chunk size for FS operations
    int32 maxCreateFileContent = 8;       // Maximum chunk size for FS Create operations
  }
  cfgOptions config = 6;
  dbConfig dbCfg = 7;                    // Database configuration
  string handler = 8;                     // PHP Callback handler for TaskExit
}

message TaskSetStatusRequest {
  taskStatus st_code = 1;                 // Status code of a task.
  string error = 2;                       // Optional error, if any. Valid only when Status is non success/in_progress.
}

message TaskExitRequest {                 // No reply. Server must close pipe/socket after this message.
  string result = 1;                      // Result of task, if any.
}

message TaskLogRequest {                  // No reply.
  logLvl log_lvl = 1;
  string module = 2;                      // What module logs belongs to.
  repeated string content = 3;            // One or more strings to put to log.
}
