syntax = "proto3";

/*
Read request = Client sends only msgClass(see Request) and server will reply with full message answer.
Write request = Client send full message and server process it, and reply if message type need that.

Client must send TaskStatus + TaskExit messages before exit.
If server wants gracefully shutdown it must reply with GetState.bStop = True and wait for clients TaskStatus/TaskExit.
If there is no time for that, server must close pipe/socket and after client detect broken pipe/connection it must stop.
*/

enum msgClass {
    RESERVED = 0;
    INIT_TASK = 1;
    TASK_STATUS = 2;
    TASK_EXIT = 3;
    GET_STATE = 4;
    OPEN_CHANNEL = 5;                     //Reserved for future addon for multithreading requests.
    LOG = 6;
    GET_FILE_CONTENT = 7;
    SELECT = 8;
}

message Request {                         //This client sends this to get data from server.
  msgClass classId = 1;
}

message InitTask {                        //Reply from server for request with msgId = 1.
  msgClass classId = 1;                   //msgClass.INIT_TASK
  string AppPath = 2;                     //Path to target app directory, to be executed.
  repeated string args = 6;               //Optional arguments to pass to target python app's module.
  message ConfigOptions {
    int32 LogLvl = 1;                     //0-4 , level logs from NC documentation.
    string DataFolder = 2;                //Path to NC data folder.
  }
  ConfigOptions config = 7;
}

enum taskStatus {
    ST_SUCCESS = 0;
    ST_IN_PROGRESS = 1;
    ST_INIT_ERROR = 2;
    ST_EXCEPTION = 3;
}

message TaskStatus {                      //Write request to set Task Status. No reply.
  msgClass classId = 1;                   //TaskStatus.TASK_STATUS
  taskStatus st_code = 2;                 //Status code of a task.
  string errDescription = 8;              //Optional error, if any. Valid only when Status is non success/in_progress.
}

message TaskExit {                        //Write request. No reply. Server must close pipe/socket after this message.
  msgClass classId = 1;                   //msgClass.TASK_EXIT
  string msgText = 8;                     //Optional text, for exit action. Ignored in most cases.
}

message GetState {                        //Reply from server for request with msgId = 5. Client send it every 10 sec.
  msgClass classId = 1;                   //msgClass.GET_STATE
  bool bStop = 2;                         //If true client must gracefully stop it's work.
  //? Something else?
}

message OpenChannel {                     //Request from client to open additional communication channel.
  msgClass classId = 1;                   //msgClass.OPEN_CHANNEL
  //Not Implemented.
}

message Log {                             //Write request. No reply.
  msgClass classId = 1;                   //msgClass.LOG
  int32 flags = 2;                        //Reserved.
  string sModule = 3;                     //What module logs belongs to.
  repeated string Content = 4;            //One or more strings to put to log.
}

message GetFileContent {                  //Read\Write request for file.
  msgClass classId = 1;                   //msgClass.GET_FILE_CONTENT
  string UserID = 2;
  string FileId = 3;
  int64 ResultCode = 4;                   //Present only in reply from server.
  bytes FileContent = 5;                  //Present only in reply from server and if ResultCode is success.
}

message Select {                          //Reply for this message - TODO!
  msgClass classId = 1;                   //msgClass.SELECT
  repeated string what = 2;               //aliases or filed names.
  string from = 3;
  string from_alias = 4;
  message JoinType {
    string name = 1;                      //join, innerJoin, leftJoin, rightJoin.
    string fromAlias = 2;
    string join = 3;
    string alias = 4;
    string condition = 5;
  }
  repeated JoinType joins = 5;
  message WhereExpr {
    string type = 1;                       //where, andWhere, orWhere
    string expression = 2;
  }
  repeated WhereExpr whereas = 6;
  repeated string GroupBy = 7;
  message HavingExpr {
    string type = 1;                       //having, andHaving, orHaving
    string expression = 2;
  }
  repeated HavingExpr havings = 8;
  repeated string OrderBy = 9;
  int64 MaxResult = 10;
  int64 FirstResult = 11;
}


